/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.codeup.ui;

import com.codeup.domain.Estudiante;
import com.codeup.domain.Nota;
import com.codeup.service.ArchivoService;
import com.codeup.service.RegistroEstudiantesService;
import java.awt.Color;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author sebastian
 */
public class RegistroEstudianteFrame extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(RegistroEstudianteFrame.class.getName());
        private Object com;
       
private final RegistroEstudiantesService registroEstudiantesService = new RegistroEstudiantesService();
private void actualizarListaEstudiantes() {
    // Obtener la lista actual de estudiantes
    List<Estudiante> estudiantes = registroEstudiantesService.getEstudiantes();

    // Crear columnas de la tabla
    String[] columnas = {"ID", "Nombre", "Edad", "Nota 1", "Nota 2", "Nota 3"};
    Object[][] datos = new Object[estudiantes.size()][6];

    for (int i = 0; i < estudiantes.size(); i++) {
        Estudiante e = estudiantes.get(i);
        List<Nota> notas = e.getNotas();

        datos[i][0] = e.getId();
        datos[i][1] = e.getNombre();
        datos[i][2] = e.getEdad();
        datos[i][3] = notas.size() > 0 ? notas.get(0).getValor() : 0.0;
        datos[i][4] = notas.size() > 1 ? notas.get(1).getValor() : 0.0;
        datos[i][5] = notas.size() > 2 ? notas.get(2).getValor() : 0.0;
    }

    // Crear modelo de tabla no editable
    javax.swing.table.DefaultTableModel modelo = new javax.swing.table.DefaultTableModel(datos, columnas) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // No editable
        }
    };

    // Asignar modelo a la JTable
    tableEstudiantes.setModel(modelo);
}


    /**
     * Creates new form RegistroEstudianteFrame
     */
    public RegistroEstudianteFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombre = new javax.swing.JTextField();
        edad = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        nota1 = new javax.swing.JTextField();
        nota2 = new javax.swing.JTextField();
        nota3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        calcular = new javax.swing.JButton();
        estadisticas = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEstudiantes = new javax.swing.JTable();
        promedio = new javax.swing.JLabel();
        notamaxima = new javax.swing.JLabel();
        aprobadoreprobado = new javax.swing.JLabel();
        btnCerrarSesion = new javax.swing.JButton();
        btnGuardarCSV = new javax.swing.JButton();
        btnCargarCSV = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreActionPerformed(evt);
            }
        });

        edad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edadActionPerformed(evt);
            }
        });

        nota1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nota1ActionPerformed(evt);
            }
        });

        nota2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nota2ActionPerformed(evt);
            }
        });

        nota3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nota3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Nota1");

        jLabel4.setText("Nota2");

        jLabel5.setText("Nota3");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nota1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(nota3)
                    .addComponent(nota2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nota1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(5, 5, 5)
                .addComponent(nota2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nota3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jLabel1.setText("Nombre");

        jLabel2.setText("Edad");

        calcular.setText("Calcular");
        calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularActionPerformed(evt);
            }
        });

        estadisticas.setText("Estadisticas");
        estadisticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasActionPerformed(evt);
            }
        });

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        tableEstudiantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Edad", "Nota 1", "Nota 2", "Nota 3"
            }
        ));
        jScrollPane1.setViewportView(tableEstudiantes);

        btnCerrarSesion.setText("Cerrar Sesi√≥n");
        btnCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesionActionPerformed(evt);
            }
        });

        btnGuardarCSV.setText("Guardar CSV");
        btnGuardarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCSVActionPerformed(evt);
            }
        });

        btnCargarCSV.setText("Cargar CSV");
        btnCargarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarCSVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(calcular)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(estadisticas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(guardar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(promedio, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(notamaxima, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edad, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(aprobadoreprobado, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGuardarCSV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCargarCSV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCerrarSesion)
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCerrarSesion)
                        .addGap(0, 17, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addGap(13, 13, 13)
                                .addComponent(edad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(calcular)
                                    .addComponent(estadisticas)
                                    .addComponent(guardar)))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(promedio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(notamaxima, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(aprobadoreprobado, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGuardarCSV)
                            .addComponent(btnCargarCSV))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void edadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edadActionPerformed

    private void nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreActionPerformed

    private void calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularActionPerformed
        try {
    // Validar que los campos de nota no est√©n vac√≠os
    if (nota1.getText().trim().isEmpty() || nota2.getText().trim().isEmpty() || nota3.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(
            null,
            "Por favor, complete las tres notas antes de continuar.",
            "Campos vac√≠os",
            JOptionPane.WARNING_MESSAGE
        );
        return;
    }

    // Convertir textos a valores num√©ricos
    double valor1 = Double.parseDouble(nota1.getText().trim());
    double valor2 = Double.parseDouble(nota2.getText().trim());
    double valor3 = Double.parseDouble(nota3.getText().trim());

    // Validar rango de notas (0 a 5)
    if (valor1 < 0 || valor1 > 5 || valor2 < 0 || valor2 > 5 || valor3 < 0 || valor3 > 5) {
        JOptionPane.showMessageDialog(
            null,
            "Las notas deben estar entre 0 y 5.",
            "Nota inv√°lida",
            JOptionPane.ERROR_MESSAGE
        );
        return;
    }

    // Validar que el nombre no est√© vac√≠o (opcional pero recomendable)
    if (nombre.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(
            null,
            "Por favor, ingrese el nombre del estudiante.",
            "Nombre requerido",
            JOptionPane.WARNING_MESSAGE
        );
        return;
    }

    // Crear lista de notas
    List<com.codeup.domain.Nota> notas = java.util.Arrays.asList(
        new com.codeup.domain.Nota(valor1),
        new com.codeup.domain.Nota(valor2),
        new com.codeup.domain.Nota(valor3)
    );

    // Calcular promedio, nota m√°xima y si est√° aprobado
    com.codeup.service.CalculoService calculoService = new com.codeup.service.CalculoService();
    double promedioValor = calculoService.promedio(notas);
    com.codeup.domain.Nota notaMax = calculoService.notaMaxima(notas);
    boolean aprobado = calculoService.aprobadoReprobado(promedioValor);

    // Mostrar resultados en los labels
    promedio.setText("Promedio: " + String.format("%.2f", promedioValor));
    notamaxima.setText("Nota m√°xima: " + String.format("%.2f", notaMax.getValor()));

    if (aprobado) {
        aprobadoreprobado.setText("Estudiante " + nombre.getText().trim() + " est√° aprobado");
        aprobadoreprobado.setForeground(Color.GREEN);
    } else {
        aprobadoreprobado.setText("Estudiante " + nombre.getText().trim() + " est√° reprobado");
        aprobadoreprobado.setForeground(Color.RED);
    }

} catch (NumberFormatException e) {
    // Error si el usuario ingres√≥ texto en vez de n√∫meros
    JOptionPane.showMessageDialog(
        null,
        "Por favor, ingrese solo n√∫meros v√°lidos para las notas (por ejemplo: 4.5, 3, 5).",
        "Error de formato",
        JOptionPane.ERROR_MESSAGE
    );
    
    // Limpiar los labels
    promedio.setText("Promedio: ---");
    notamaxima.setText("Nota m√°xima: ---");
    aprobadoreprobado.setText("Error: ingrese n√∫meros v√°lidos");
    aprobadoreprobado.setForeground(Color.ORANGE);
}

    }//GEN-LAST:event_calcularActionPerformed

    private void estadisticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasActionPerformed
                                            
    
    javax.swing.table.DefaultTableModel model =
            (javax.swing.table.DefaultTableModel) tableEstudiantes.getModel();

    // 1) Validaci√≥n: si la tabla est√° vac√≠a, avisar y salir
    if (model.getRowCount() == 0) {
        javax.swing.JOptionPane.showMessageDialog(this,
            "No hay estudiantes registrados para calcular estad√≠sticas.",
            "Aviso", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // 2) Construir lista de Estudiante desde la tabla
        java.util.List<com.codeup.domain.Estudiante> estudiantes = new java.util.ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            String nombreEst = model.getValueAt(i, 0).toString();
            int edadEst = Integer.parseInt(model.getValueAt(i, 1).toString());
            double n1 = Double.parseDouble(model.getValueAt(i, 2).toString());
            double n2 = Double.parseDouble(model.getValueAt(i, 3).toString());
            double n3 = Double.parseDouble(model.getValueAt(i, 4).toString());

            java.util.List<com.codeup.domain.Nota> notas = java.util.Arrays.asList(
                new com.codeup.domain.Nota(n1),
                new com.codeup.domain.Nota(n2),
                new com.codeup.domain.Nota(n3)
            );

            estudiantes.add(new com.codeup.domain.Estudiante(nombreEst, edadEst, notas));
        }

        // 3) Usar EstadisticasService
        com.codeup.service.EstadisticasService estadisticasService = new com.codeup.service.EstadisticasService();

        double promGeneral = estadisticasService.promedioGeneral(estudiantes);
        long aprobados = estadisticasService.contarAprobados(estudiantes);
        long reprobados = estadisticasService.contarReprobados(estudiantes);
        com.codeup.domain.Estudiante mejor = estadisticasService.mejorEstudiante(estudiantes);
        com.codeup.domain.Estudiante peor = estadisticasService.peorEstudiante(estudiantes);

        // 4A) Mostrar en JOptionPane (actual)
        String mensaje = String.format(
            "Promedio general: %.2f%nAprobados: %d%nReprobados: %d%nMejor estudiante: %s%nPeor estudiante: %s",
            promGeneral, aprobados, reprobados,
            (mejor != null ? mejor.getNombre() : "N/A"),
            (peor != null ? peor.getNombre() : "N/A")
        );
        javax.swing.JOptionPane.showMessageDialog(this, mensaje, "Estad√≠sticas", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException ex) {
        javax.swing.JOptionPane.showMessageDialog(this,
            "Error: revisa que las edades y notas en la tabla sean num√©ricas.",
            "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    } catch (IllegalArgumentException ex) {
        // tu servicio lanza esta excepci√≥n si la lista est√° vac√≠a u otro caso
        javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    } catch (HeadlessException ex) {
        javax.swing.JOptionPane.showMessageDialog(this,
            "Error inesperado al calcular estad√≠sticas: " + ex.getMessage(),
            "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_estadisticasActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
                                          
    try {
        String nombreEstudiante = nombre.getText().trim();
        int edadEstudiante = Integer.parseInt(edad.getText().trim());
        double n1 = Double.parseDouble(nota1.getText().trim());
        double n2 = Double.parseDouble(nota2.getText().trim());
        double n3 = Double.parseDouble(nota3.getText().trim());

  
        if (nombreEstudiante.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "El nombre no puede estar vac√≠o", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (edadEstudiante <= 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "La edad debe ser mayor a 0", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

    
        java.util.List<com.codeup.domain.Nota> notas = java.util.Arrays.asList(
            new com.codeup.domain.Nota(n1),
            new com.codeup.domain.Nota(n2),
            new com.codeup.domain.Nota(n3)
        );

        
        com.codeup.domain.Estudiante estudiante = new com.codeup.domain.Estudiante(
            nombreEstudiante, edadEstudiante, notas
        );

        
        registroEstudiantesService.agregarEstudiante(estudiante);

       
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableEstudiantes.getModel();
        double promedio = (n1 + n2 + n3) / 3.0;
        model.addRow(new Object[]{nombreEstudiante, edadEstudiante, n1, n2, n3, promedio});

        // Mensaje de confirmaci√≥n
        javax.swing.JOptionPane.showMessageDialog(this, "Estudiante registrado con √©xito", "√âxito", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        // Limpiar campos
        nombre.setText("");
        edad.setText("");
        nota1.setText("");
        nota2.setText("");
        nota3.setText("");

    } catch (NumberFormatException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Ingrese valores v√°lidos para edad y notas", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Ocurri√≥ un error: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
     

    }//GEN-LAST:event_guardarActionPerformed

    private void nota3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nota3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nota3ActionPerformed

    private void nota2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nota2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nota2ActionPerformed

    private void nota1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nota1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nota1ActionPerformed

    private void btnCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesionActionPerformed
                                                  
    int opcion = JOptionPane.showConfirmDialog(
            this,
            "¬øDesea cerrar sesi√≥n?",
            "Confirmar Logout",
            JOptionPane.YES_NO_OPTION
    );

    if (opcion == JOptionPane.YES_OPTION) {
        this.dispose(); // Cierra la ventana actual

        // Volver a mostrar el Login
        new Login().setVisible(true);
    }


    }//GEN-LAST:event_btnCerrarSesionActionPerformed

    private void btnGuardarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCSVActionPerformed
                                               
    try {
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        int seleccion = fileChooser.showSaveDialog(this);

        if (seleccion == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File archivo = fileChooser.getSelectedFile();

            // Aseguramos extensi√≥n .csv
            if (!archivo.getName().toLowerCase().endsWith(".csv")) {
                archivo = new java.io.File(archivo.getAbsolutePath() + ".csv");
            }

        
            com.codeup.service.ArchivoService archivoService = new com.codeup.service.ArchivoService();
            archivoService.guardarCSV(archivo, registroEstudiantesService.getEstudiantes());

            javax.swing.JOptionPane.showMessageDialog(
                this,
                "‚úÖ Archivo guardado correctamente.",
                "√âxito",
                javax.swing.JOptionPane.INFORMATION_MESSAGE
            );
        }

    } catch (Exception ex) {
        javax.swing.JOptionPane.showMessageDialog(
            this,
            "‚ùå Error al guardar archivo: " + ex.getMessage(),
            "Error",
            javax.swing.JOptionPane.ERROR_MESSAGE
        );
    }   


    }//GEN-LAST:event_btnGuardarCSVActionPerformed

    private void btnCargarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarCSVActionPerformed
        
    JFileChooser fileChooser = new JFileChooser();
    int seleccion = fileChooser.showOpenDialog(this);

    if (seleccion != JFileChooser.APPROVE_OPTION) {
        return; // usuario cancel√≥
    }

    File archivo = fileChooser.getSelectedFile();
    ArchivoService archivoService = new ArchivoService();

    List<Estudiante> estudiantesCargados = new ArrayList<>();

    try {
        // Cargar CSV
        estudiantesCargados = archivoService.cargarCSV(archivo);

        if (estudiantesCargados.isEmpty()) {
            JOptionPane.showMessageDialog(
                    this,
                    "El CSV est√° vac√≠o o no contiene estudiantes v√°lidos.",
                    "Aviso",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        // Preguntar al usuario si desea reemplazar o fusionar
        int opcion = JOptionPane.showOptionDialog(
                this,
                "¬øDesea reemplazar la lista actual o fusionar los estudiantes?",
                "Cargar CSV",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new Object[]{"Reemplazar", "Fusionar"},
                "Reemplazar"
        );

        if (opcion == JOptionPane.YES_OPTION) {
            // Reemplazar la lista
            registroEstudiantesService.reemplazarEstudiantes(estudiantesCargados);
        } else if (opcion == JOptionPane.NO_OPTION) {
            // Fusionar con la lista existente
            registroEstudiantesService.fusionarEstudiantes(estudiantesCargados);
        } else {
            // Si cierra el di√°logo, no hacer nada
            return;
        }

        // Actualizar JTable
        actualizarListaEstudiantes();

        // Confirmaci√≥n
        JOptionPane.showMessageDialog(
                this,
                "‚úÖ Datos cargados correctamente desde CSV",
                "√âxito",
                JOptionPane.INFORMATION_MESSAGE
        );

    } catch (IOException ex) {
        JOptionPane.showMessageDialog(
                this,
                "‚ùå Error al cargar CSV:\n" + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE
        );
    
}

    }//GEN-LAST:event_btnCargarCSVActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new RegistroEstudianteFrame().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aprobadoreprobado;
    private javax.swing.JButton btnCargarCSV;
    private javax.swing.JButton btnCerrarSesion;
    private javax.swing.JButton btnGuardarCSV;
    private javax.swing.JButton calcular;
    private javax.swing.JTextField edad;
    private javax.swing.JButton estadisticas;
    private javax.swing.JButton guardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombre;
    private javax.swing.JTextField nota1;
    private javax.swing.JTextField nota2;
    private javax.swing.JTextField nota3;
    private javax.swing.JLabel notamaxima;
    private javax.swing.JLabel promedio;
    private javax.swing.JTable tableEstudiantes;
    // End of variables declaration//GEN-END:variables
}
